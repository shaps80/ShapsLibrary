<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/SLLog.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/SLLog</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SLLog.h</DeclaredIn>
			
			<NodeRef refid="9"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SLLog/loggingQueue</TokenIdentifier>
			<Abstract type="html">Provides access to the underlying logging queue.
This may be helpful to Logger classes for things like thread synchronization.</Abstract>
			<DeclaredIn>SLLog.h</DeclaredIn>			
			
			<Declaration>+ (dispatch_queue_t)loggingQueue</Declaration>
			
			
			<Anchor>//api/name/loggingQueue</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SLLog/log:level:flag:context:file:function:line:tag:format:</TokenIdentifier>
			<Abstract type="html">Logging Primitive.</Abstract>
			<DeclaredIn>SLLog.h</DeclaredIn>			
			
			<Declaration>+ (void)log:(BOOL)synchronous level:(int)level flag:(int)flag context:(int)context file:(const char *)file function:(const char *)function line:(int)line tag:(id)tag format:(NSString *)format, ...</Declaration>
			
			
			<Anchor>//api/name/log:level:flag:context:file:function:line:tag:format:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SLLog/log:level:flag:context:file:function:line:tag:format:args:</TokenIdentifier>
			<Abstract type="html">Logging Primitive.</Abstract>
			<DeclaredIn>SLLog.h</DeclaredIn>			
			
			<Declaration>+ (void)log:(BOOL)asynchronous level:(int)level flag:(int)flag context:(int)context file:(const char *)file function:(const char *)function line:(int)line tag:(id)tag format:(NSString *)format args:(va_list)argList</Declaration>
			
			
			<Anchor>//api/name/log:level:flag:context:file:function:line:tag:format:args:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SLLog/flushLog</TokenIdentifier>
			<Abstract type="html">Since logging can be asynchronous, there may be times when you want to flush the logs.
The framework invokes this automatically when the application quits.</Abstract>
			<DeclaredIn>SLLog.h</DeclaredIn>			
			
			<Declaration>+ (void)flushLog</Declaration>
			
			
			<Anchor>//api/name/flushLog</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SLLog/addLogger:</TokenIdentifier>
			<Abstract type="html">Loggers</Abstract>
			<DeclaredIn>SLLog.h</DeclaredIn>			
			
			<Declaration>+ (void)addLogger:(id&lt;SLLogger&gt;)logger</Declaration>
			
			
			<Anchor>//api/name/addLogger:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SLLog/registeredClasses</TokenIdentifier>
			<Abstract type="html">Registered Dynamic Logging</Abstract>
			<DeclaredIn>SLLog.h</DeclaredIn>			
			
			<Declaration>+ (NSArray *)registeredClasses</Declaration>
			
			
			<Anchor>//api/name/registeredClasses</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SLLog/initialize</TokenIdentifier>
			<Abstract type="html">The runtime sends initialize to each class in a program exactly one time just before the class,
or any class that inherits from it, is sent its first message from within the program. (Thus the
method may never be invoked if the class is not used.) The runtime sends the initialize message to
classes in a thread-safe manner. Superclasses receive this message before their subclasses.</Abstract>
			<DeclaredIn>SLLog.m</DeclaredIn>			
			
			<Declaration>+ (void)initialize</Declaration>
			
			
			<Anchor>//api/name/initialize</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SLLog/lt_addLogger:</TokenIdentifier>
			<Abstract type="html">This method should only be run on the logging thread/queue.</Abstract>
			<DeclaredIn>SLLog.m</DeclaredIn>			
			
			<Declaration>+ (void)lt_addLogger:(id&lt;SLLogger&gt;)logger</Declaration>
			
			
			<Anchor>//api/name/lt_addLogger:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SLLog/lt_removeLogger:</TokenIdentifier>
			<Abstract type="html">This method should only be run on the logging thread/queue.</Abstract>
			<DeclaredIn>SLLog.m</DeclaredIn>			
			
			<Declaration>+ (void)lt_removeLogger:(id&lt;SLLogger&gt;)logger</Declaration>
			
			
			<Anchor>//api/name/lt_removeLogger:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SLLog/lt_removeAllLoggers</TokenIdentifier>
			<Abstract type="html">This method should only be run on the logging thread/queue.</Abstract>
			<DeclaredIn>SLLog.m</DeclaredIn>			
			
			<Declaration>+ (void)lt_removeAllLoggers</Declaration>
			
			
			<Anchor>//api/name/lt_removeAllLoggers</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SLLog/lt_log:</TokenIdentifier>
			<Abstract type="html">This method should only be run on the logging thread/queue.</Abstract>
			<DeclaredIn>SLLog.m</DeclaredIn>			
			
			<Declaration>+ (void)lt_log:(SLLogMessage *)logMessage</Declaration>
			
			
			<Anchor>//api/name/lt_log:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SLLog/lt_flush</TokenIdentifier>
			<Abstract type="html">This method should only be run on the background logging thread.</Abstract>
			<DeclaredIn>SLLog.m</DeclaredIn>			
			
			<Declaration>+ (void)lt_flush</Declaration>
			
			
			<Anchor>//api/name/lt_flush</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
	</File>
</Tokens>